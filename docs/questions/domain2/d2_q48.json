{
  "id": "d2_q48",
  "type": "multiple",
  "text": "【複数選択】 Amazon Bedrockでコスト最適化を実現する方法として適切なものを2つ選択してください。",
  "choices": [
    {
      "label": "A",
      "text": "プロビジョンドスループットを使用して予測可能なワークロードのコストを削減"
    },
    {
      "label": "B",
      "text": "常に最大のモデルサイズを使用する"
    },
    {
      "label": "C",
      "text": "プロンプトのキャッシングとバッチ処理を活用"
    },
    {
      "label": "D",
      "text": "全てのリクエストをリアルタイムで処理"
    },
    {
      "label": "E",
      "text": "モデルの選択を用途に応じて最適化（簡単なタスクには小さいモデル）"
    }
  ],
  "correct": [
    0,
    4
  ],
  "explanation": "<h5>詳細解説</h5><p>Amazon Bedrockのコスト最適化には、適切なモデル選択と利用方法の最適化が重要です。</p><h5>選択肢AとEが正解である理由</h5><h5>A. プロビジョンドスループットを使用</h5><ul><li>予測可能なワークロードに対して、一定期間のスループットを事前に購入することで割引を受けられます</li><li>オンデマンド価格と比較して大幅なコスト削減が可能</li><li>安定したパフォーマンスも確保できます</li></ul><h5>E. 用途に応じたモデルの最適化</h5><ul><li>簡単なタスクには小さいモデル（例：Claude Instant）を使用</li><li>複雑なタスクにのみ大きいモデル（例：Claude 3 Opus）を使用</li><li>タスクの複雑さに応じてモデルを使い分けることで、コストとパフォーマンスのバランスを最適化</li></ul><h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>B) 常に最大のモデルサイズを使用する:</strong> 常に最大のモデルを使用すると、不必要にコストが増大します</li><li><strong>C) プロンプトのキャッシングとバッチ処理を活用:</strong> Bedrockは現在、プロンプトのキャッシング機能を提供していません</li><li><strong>D) 全てのリクエストをリアルタイムで処理:</strong> バッチ処理が可能な場合は、リアルタイム処理よりもコスト効率的です</li></ul><h5>その他のコスト最適化のベストプラクティス</h5><ul><li>プロンプトエンジニアリングによるトークン数の削減</li><li>不要なリクエストの削減</li><li>モニタリングによる使用状況の把握と最適化</li></ul>",
  "resources": []
}