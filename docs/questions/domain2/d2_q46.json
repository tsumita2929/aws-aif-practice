{
  "id": "d2_q46",
  "type": "single",
  "text": "Amazon Bedrockを使用して企業向けチャットボットを構築する際、最も適切なアーキテクチャはどれですか？",
  "choices": [
    {
      "label": "A",
      "text": "Bedrock + Lambda + API Gateway + S3（知識ベース）"
    },
    {
      "label": "B",
      "text": "Bedrock単体で全ての処理を実行"
    },
    {
      "label": "C",
      "text": "EC2上でオープンソースLLMを実行"
    },
    {
      "label": "D",
      "text": "SageMakerで独自のLLMを訓練"
    }
  ],
  "correct": [
    0
  ],
  "explanation": "企業向けチャットボットの構築には、スケーラビリティ、セキュリティ、知識管理を考慮した包括的なアーキテクチャが必要です。\n\n選択肢Aが正解である理由：\n- Bedrock: 基盤モデル（LLM）へのアクセスを提供し、テキスト生成や理解を担当\n- Lambda: サーバーレスでビジネスロジックを実行し、Bedrockへのリクエストを処理\n- API Gateway: RESTful APIエンドポイントを提供し、フロントエンドとの通信を管理\n- S3（知識ベース）: 企業固有のドキュメントを保存し、Bedrockのナレッジベース機能と連携してRAGを実現\n\nこのアーキテクチャの利点：\n- サーバーレスによる自動スケーリングとコスト最適化\n- API Gatewayによる認証・認可の実装\n- 企業知識の活用によるより正確な回答の生成\n- マネージドサービスによる運用負荷の軽減\n\n他の選択肢が不適切である理由：\n- B: Bedrockだけでは、APIエンドポイントの提供や認証、ビジネスロジックの実装ができません\n- C: EC2でのLLM運用は、スケーリング、メンテナンス、コストの面で非効率的です\n- D: 独自LLMの訓練は時間とコストがかかり、企業向けチャットボットには過剰な投資となる場合が多いです\n\n追加で考慮すべきコンポーネント：\n- DynamoDB: 会話履歴の保存\n- CloudWatch: ログとモニタリング\n- Cognito: ユーザー認証",
  "resources": []
}