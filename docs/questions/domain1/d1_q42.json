{
  "id": "d1_q42",
  "type": "single",
  "text": "次のシナリオを考えてください： 「スマートフォンアプリで、ユーザーが撮影した植物の写真から種類を特定したい」 このタスクに最も適した手法はどれですか？",
  "choices": [
    {
      "label": "A",
      "text": "線形回帰"
    },
    {
      "label": "B",
      "text": "転移学習を使用した画像分類"
    },
    {
      "label": "C",
      "text": "時系列分析"
    },
    {
      "label": "D",
      "text": "強化学習"
    }
  ],
  "correct": [
    1
  ],
  "explanation": "\n                <h5>詳細解説</h5>\n                <p>植物の種類を写真から特定するタスクは画像分類問題です。転移学習（Transfer Learning）を使用することで、限られたデータでも高精度なモデルを構築できます。</p>\n                \n                <h5>転移学習が最適な理由</h5>\n                <ul>\n                    <li><strong>事前学習済みモデルの活用：</strong>\n                        <ul>\n                            <li>ImageNet等で学習済みのCNNモデル（ResNet、EfficientNet等）を利用</li>\n                            <li>一般的な画像特徴（エッジ、テクスチャ、形状）は既に学習済み</li>\n                            <li>植物特有の特徴のみを追加学習すれば良い</li>\n                        </ul>\n                    </li>\n                    <li><strong>少ないデータでの高精度：</strong>\n                        <ul>\n                            <li>各植物種のサンプル数が少なくても実用的な精度を達成</li>\n                            <li>データ収集コストの大幅削減</li>\n                            <li>レアな植物種にも対応可能</li>\n                        </ul>\n                    </li>\n                    <li><strong>実装の容易さ：</strong>\n                        <ul>\n                            <li>TensorFlow Hub、PyTorch Hub等で簡単に実装</li>\n                            <li>Fine-tuningで植物分類に特化</li>\n                            <li>モバイルデバイスへの展開も容易</li>\n                        </ul>\n                    </li>\n                </ul>\n                \n                <h5>なぜ他の選択肢が不適切なのか</h5>\n                <ul>\n                    <li><strong>A（線形回帰）：</strong> 連続値予測の手法で、分類タスクには不適切。画像の複雑な特徴も捉えられない</li>\n                    <li><strong>C（時系列分析）：</strong> 時間的な変化を扱う手法で、静的な画像分類には無関係</li>\n                    <li><strong>D（強化学習）：</strong> 試行錯誤による学習手法で、教師あり分類タスクには非効率的</li>\n                </ul>\n                \n                <h5>実装例</h5>\n                <pre><code># TensorFlowでの転移学習実装例\nimport tensorflow as tf\nfrom tensorflow.keras.applications import MobileNetV2\n\n# 事前学習済みモデルをロード（最終層を除く）\nbase_model = MobileNetV2(\n    input_shape=(224, 224, 3),\n    include_top=False,\n    weights='imagenet'\n)\n\n# ベースモデルの重みを固定\nbase_model.trainable = False\n\n# カスタム分類層を追加\nmodel = tf.keras.Sequential([\n    base_model,\n    tf.keras.layers.GlobalAveragePooling2D(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(num_plant_species, activation='softmax')\n])</code></pre>\n                \n                <h5>スマートフォンアプリでの考慮事項</h5>\n                <ul>\n                    <li><strong>モデルサイズ：</strong> MobileNet、EfficientNet-Liteなど軽量モデルを選択</li>\n                    <li><strong>推論速度：</strong> TensorFlow Liteでの量子化により高速化</li>\n                    <li><strong>オフライン対応：</strong> モデルをアプリに埋め込み、ネットワーク不要に</li>\n                    <li><strong>更新性：</strong> 新種追加時のモデル更新メカニズム</li>\n                </ul>\n                \n                <h5>AWSでの実装</h5>\n                <p>・Amazon Rekognition Custom Labels：植物分類モデルを簡単に構築<br>\n                ・Amazon SageMaker：転移学習パイプラインの構築<br>\n                ・AWS Amplify：モバイルアプリとの統合</p>\n            ",
  "resources": []
}