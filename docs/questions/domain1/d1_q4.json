{
  "id": "d1_q4",
  "type": "multiple",
  "text": "プロンプトエンジニアリングのベストプラクティスとして適切なものを2つ選択してください。",
  "choices": [
    {
      "label": "A",
      "text": "できるだけ曖昧な指示を与える"
    },
    {
      "label": "B",
      "text": "Few-shot学習のための具体例を含める"
    },
    {
      "label": "C",
      "text": "Chain-of-Thought（CoT）プロンプティングで推論過程を明示させる"
    },
    {
      "label": "D",
      "text": "プロンプトは常に1文以内に収める"
    },
    {
      "label": "E",
      "text": "タスクの制約条件や期待する出力形式を明確に指定する"
    }
  ],
  "correct": [
    1,
    2
  ],
  "explanation": "\n                <h5>詳細解説</h5>\n                <p>効果的なプロンプトエンジニアリングは、LLMの性能を最大化する鍵です。</p>\n                <h5>正解の理由</h5>\n                <ul>\n                    <li><strong>B:</strong> Few-shot学習により、タスクの文脈を効果的に伝達できます</li>\n                    <li><strong>C:</strong> Chain-of-Thoughtで複雑な推論タスクの精度が向上します</li>\n                </ul>\n                <h5>プロンプト例</h5>\n                <pre><code># 良いプロンプト例（Few-shot + CoT）\nQ: 12 + 15 = ?\nA: 12 + 15 = 27\n\nQ: 23 + 19 = ?\nA: Let me solve step by step:\n23 + 19 = 23 + 20 - 1 = 43 - 1 = 42</code></pre>\n            <h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) できるだけ曖昧な指示を与える:</strong> これは逆効果です。プロンプトエンジニアリングでは、明確で具体的な指示を与えることが重要です。曖昧な指示は予測不可能な出力や望ましくない結果につながります。</li><li><strong>D) プロンプトは常に1文以内に収める:</strong> これは制限的すぎます。複雑なタスクでは、詳細な指示、例、制約条件などを含む長いプロンプトが必要な場合があります。プロンプトの長さは、タスクの複雑さに応じて適切に調整すべきです。</li><li><strong>E) タスクの制約条件や期待する出力形式を明確に指定する:</strong> これは実際には良いプラクティスですが、Few-shot学習（B）やChain-of-Thought（C）と比較すると、より基本的な手法です。この問題では、より高度で効果的なテクニックであるBとCが最適な選択肢として設定されています。</li></ul>",
  "resources": [
    {
      "title": "Prompt Engineering Guide",
      "url": "https://www.promptingguide.ai/"
    }
  ]
}