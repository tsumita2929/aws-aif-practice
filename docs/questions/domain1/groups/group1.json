{
  "domain": 1,
  "group": 1,
  "title": "基本概念",
  "description": "教師あり学習、分類vs回帰、過学習防止、プロンプトエンジニアリング、深層学習vs従来ML、NLPタスク",
  "questionCount": 10,
  "questions": [
    {
      "id": "d1_q1",
      "type": "single",
      "text": "機械学習における「教師あり学習」の説明として最も適切なものはどれですか？",
      "choices": [
        {
          "label": "A",
          "text": "データのパターンを自動的に発見し、ラベルなしでグループ化する手法"
        },
        {
          "label": "B",
          "text": "試行錯誤を通じて最適な行動を学習する手法"
        },
        {
          "label": "C",
          "text": "ラベル付きデータを使用して入力と出力の関係を学習する手法"
        },
        {
          "label": "D",
          "text": "人間の介入なしに自律的に学習する手法"
        }
      ],
      "correct": [
        2
      ],
      "explanation": "\n                <h5>詳細解説</h5>\n                <p>教師あり学習は、ラベル付きデータ（入力と正解のペア）を使用してモデルを訓練する手法です。</p>\n                <h5>なぜ他の選択肢が誤りなのか</h5>\n                <ul>\n                    <li><strong>A:</strong> 教師なし学習（クラスタリング）の説明です</li>\n                    <li><strong>B:</strong> 強化学習の説明です</li>\n                    <li><strong>D:</strong> 一般的な誤解。教師あり学習も人間がラベル付けする必要があります</li>\n                </ul>\n                <h5>実務での応用例</h5>\n                <p>スパムメール分類、画像認識、売上予測など、多くのビジネス課題で活用されています。</p>\n            <h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) データのパターンを自動的に発見し、ラベルなしでグループ化する手法:</strong> 教師なし学習（クラスタリング）の説明です</li><li><strong>B) 試行錯誤を通じて最適な行動を学習する手法:</strong> 強化学習の説明です</li><li><strong>D) 人間の介入なしに自律的に学習する手法:</strong> 一般的な誤解。教師あり学習も人間がラベル付けする必要があります</li></ul>",
      "resources": [
        {
          "title": "AWS Machine Learning University",
          "url": "https://aws.amazon.com/machine-learning/mlu/"
        }
      ]
    },
    {
      "id": "d1_q2",
      "type": "single",
      "text": "機械学習タスクを分類する際、以下のシナリオのうち「回帰問題」として最も適切に定式化されるものはどれですか？",
      "choices": [
        {
          "label": "A",
          "text": "顧客の年間購入金額を予測する（連続値）"
        },
        {
          "label": "B",
          "text": "顧客を5つの支出レベルカテゴリーに分類する（離散値）"
        },
        {
          "label": "C",
          "text": "顧客が次の3ヶ月以内に解約するかを予測する（二値分類）"
        },
        {
          "label": "D",
          "text": "顧客の好む商品カテゴリーを特定する（多クラス分類）"
        }
      ],
      "correct": [
        0
      ],
      "explanation": "\n                <h5>詳細解説</h5>\n                <p>回帰問題は連続値を予測するタスクです。購入金額のような数値を予測する場合に適用されます。</p>\n                <h5>なぜ他の選択肢が誤りなのか</h5>\n                <ul>\n                    <li><strong>B, C, D:</strong> すべて離散的なカテゴリーを予測する分類問題です</li>\n                </ul>\n                <h5>重要な違い</h5>\n                <p>分類：離散的なラベル（Yes/No、カテゴリーA/B/C）<br>\n                回帰：連続的な数値（金額、温度、スコア）</p>\n            <h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>B) 顧客を5つの支出レベルカテゴリーに分類する（離散値）:</strong> これは分類問題です。5つの離散的なカテゴリー（例：低、中低、中、中高、高）から1つを選ぶタスクであり、連続値を予測する回帰問題ではありません。</li><li><strong>C) 顧客が次の3ヶ月以内に解約するかを予測する（二値分類）:</strong> これは二値分類問題です。「解約する」か「解約しない」の2つのカテゴリーから選ぶタスクであり、連続的な数値を予測する回帰問題ではありません。</li><li><strong>D) 顧客の好む商品カテゴリーを特定する（多クラス分類）:</strong> これは多クラス分類問題です。複数の商品カテゴリー（例：電子機器、衣類、食品など）から1つを選ぶタスクであり、連続値を予測する回帰問題ではありません。</li></ul>",
      "resources": []
    },
    {
      "id": "d1_q3",
      "type": "single",
      "text": "ニューラルネットワークの「過学習（オーバーフィッティング）」を防ぐ手法として適切でないものはどれですか？",
      "choices": [
        {
          "label": "A",
          "text": "ドロップアウト"
        },
        {
          "label": "B",
          "text": "早期停止（Early Stopping）"
        },
        {
          "label": "C",
          "text": "学習率の増加"
        },
        {
          "label": "D",
          "text": "正則化（Regularization）"
        }
      ],
      "correct": [
        2
      ],
      "explanation": "\n                <h5>詳細解説</h5>\n                <p>学習率の増加は過学習を悪化させる可能性があります。大きな学習率は不安定な学習を引き起こします。</p>\n                <h5>過学習を防ぐ手法</h5>\n                <ul>\n                    <li><strong>ドロップアウト:</strong> ランダムにニューロンを無効化し、モデルの汎化性能を向上</li>\n                    <li><strong>早期停止:</strong> 検証損失が増加し始めたら学習を停止</li>\n                    <li><strong>正則化:</strong> L1/L2正則化により重みの大きさを制限</li>\n                </ul>\n            <h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) ドロップアウト:</strong> ドロップアウトは過学習を防ぐ有効な手法です。訓練時にランダムにニューロンを無効化することで、モデルが特定のニューロンに過度に依存することを防ぎ、汎化性能を向上させます。</li><li><strong>B) 早期停止（Early Stopping）:</strong> 早期停止は過学習を防ぐ有効な手法です。検証データセットの性能をモニタリングし、検証損失が増加し始めたら訓練を停止することで、過学習を防ぎます。</li><li><strong>D) 正則化（Regularization）:</strong> 正則化（L1/L2正則化など）は過学習を防ぐ有効な手法です。損失関数に重みの大きさに対するペナルティを追加することで、モデルの複雑さを制限し、過学習を防ぎます。</li></ul>",
      "resources": []
    },
    {
      "id": "d1_q4",
      "type": "multiple",
      "text": "プロンプトエンジニアリングのベストプラクティスとして適切なものを2つ選択してください。",
      "choices": [
        {
          "label": "A",
          "text": "できるだけ曖昧な指示を与える"
        },
        {
          "label": "B",
          "text": "Few-shot学習のための具体例を含める"
        },
        {
          "label": "C",
          "text": "Chain-of-Thought（CoT）プロンプティングで推論過程を明示させる"
        },
        {
          "label": "D",
          "text": "プロンプトは常に1文以内に収める"
        },
        {
          "label": "E",
          "text": "タスクの制約条件や期待する出力形式を明確に指定する"
        }
      ],
      "correct": [
        1,
        2
      ],
      "explanation": "\n                <h5>詳細解説</h5>\n                <p>効果的なプロンプトエンジニアリングは、LLMの性能を最大化する鍵です。</p>\n                <h5>正解の理由</h5>\n                <ul>\n                    <li><strong>B:</strong> Few-shot学習により、タスクの文脈を効果的に伝達できます</li>\n                    <li><strong>C:</strong> Chain-of-Thoughtで複雑な推論タスクの精度が向上します</li>\n                </ul>\n                <h5>プロンプト例</h5>\n                <pre><code># 良いプロンプト例（Few-shot + CoT）\nQ: 12 + 15 = ?\nA: 12 + 15 = 27\n\nQ: 23 + 19 = ?\nA: Let me solve step by step:\n23 + 19 = 23 + 20 - 1 = 43 - 1 = 42</code></pre>\n            <h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) できるだけ曖昧な指示を与える:</strong> これは逆効果です。プロンプトエンジニアリングでは、明確で具体的な指示を与えることが重要です。曖昧な指示は予測不可能な出力や望ましくない結果につながります。</li><li><strong>D) プロンプトは常に1文以内に収める:</strong> これは制限的すぎます。複雑なタスクでは、詳細な指示、例、制約条件などを含む長いプロンプトが必要な場合があります。プロンプトの長さは、タスクの複雑さに応じて適切に調整すべきです。</li><li><strong>E) タスクの制約条件や期待する出力形式を明確に指定する:</strong> これは実際には良いプラクティスですが、Few-shot学習（B）やChain-of-Thought（C）と比較すると、より基本的な手法です。この問題では、より高度で効果的なテクニックであるBとCが最適な選択肢として設定されています。</li></ul>",
      "resources": [
        {
          "title": "Prompt Engineering Guide",
          "url": "https://www.promptingguide.ai/"
        }
      ]
    },
    {
      "id": "d1_q5",
      "type": "single",
      "text": "深層学習（ディープラーニング）と従来の機械学習の主な違いは何ですか？",
      "choices": [
        {
          "label": "A",
          "text": "深層学習は教師なし学習のみを使用する"
        },
        {
          "label": "B",
          "text": "深層学習は多層のニューラルネットワークを使用して特徴を自動抽出する"
        },
        {
          "label": "C",
          "text": "深層学習は少量のデータでも高精度を達成できる"
        },
        {
          "label": "D",
          "text": "深層学習は計算リソースを必要としない"
        }
      ],
      "correct": [
        1
      ],
      "explanation": "<h5>詳細解説</h5><p>深層学習の最大の特徴は、多層ニューラルネットワークによる自動的な特徴抽出です。正解はB「深層学習は多層のニューラルネットワークを使用して特徴を自動抽出する」です。</p><h5>従来の機械学習との主な違い</h5><ul><li><strong>特徴エンジニアリング：</strong> 従来の機械学習では手動で特徴を設計する必要がありますが、深層学習では自動的に特徴を学習</li><li><strong>表現学習：</strong> 生データから階層的な特徴表現を自動的に獲得</li><li><strong>非線形性：</strong> 多層構造により、非線形で複雑なパターンを学習可能</li><li><strong>データ要件：</strong> 深層学習は大量のデータが必要（データハングリー）</li><li><strong>計算リソース：</strong> GPU/TPUなどの高性能計算リソースが必須</li></ul><h5>深層学習の利点と制約</h5><ul><li><strong>利点：</strong><ul><li>エンドツーエンドの学習が可能</li><li>画像、音声、自然言語などの非構造化データに強い</li><li>人間を超える精度を達成可能</li></ul></li><li><strong>制約：</strong><ul><li>大量の学習データが必要</li><li>計算コストが高い</li><li>ブラックボックス性（解釈が困難）</li></ul></li></ul><h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) 深層学習は教師なし学習のみを使用する:</strong> これは誤りです。深層学習は教師あり学習、教師なし学習、強化学習のすべてで使用されます。実際、画像分類や物体検出などの多くの深層学習アプリケーションは教師あり学習を使用しています。</li><li><strong>C) 深層学習は少量のデータでも高精度を達成できる:</strong> これは深層学習の制約と逆です。深層学習は一般的に大量のデータを必要とし、少量のデータでは過学習しやすく、従来の機械学習手法の方が良い結果を出すことが多いです。</li><li><strong>D) 深層学習は計算リソースを必要としない:</strong> これは完全に逆です。深層学習は大量の計算リソース（GPU、TPU、大容量メモリ）を必要とし、これが深層学習の主な制約の一つです。訓練には数日から数週間かかることもあります。</li></ul>",
      "resources": []
    },
    {
      "id": "d1_q6",
      "type": "single",
      "text": "機械学習における「教師あり学習」の説明として最も適切なものはどれですか？",
      "choices": [
        {
          "label": "A",
          "text": "データのパターンを自動的に発見し、ラベルなしでグループ化する手法"
        },
        {
          "label": "B",
          "text": "試行錯誤を通じて最適な行動を学習する手法"
        },
        {
          "label": "C",
          "text": "ラベル付きデータを使用して入力と出力の関係を学習する手法"
        },
        {
          "label": "D",
          "text": "人間の介入なしに自律的に学習する手法"
        }
      ],
      "correct": [
        2
      ],
      "explanation": "\n                <h5>詳細解説</h5>\n                <p>教師あり学習は、正解ラベル（教師データ）が付いたデータセットを使用して、入力データから出力を予測するモデルを学習する手法です。</p>\n                \n                <h5>なぜ他の選択肢が誤りなのか</h5>\n                <ul>\n                    <li><strong>選択肢A</strong>: これは「教師なし学習」の説明です。クラスタリングなどがこれに該当します。</li>\n                    <li><strong>選択肢B</strong>: これは「強化学習」の説明です。エージェントが環境との相互作用を通じて学習します。</li>\n                    <li><strong>選択肢D</strong>: 教師あり学習では人間がラベル付けしたデータが必要なため、完全に自律的ではありません。</li>\n                </ul>\n                \n                <h5>教師あり学習の特徴</h5>\n                <ul>\n                    <li>分類問題（カテゴリ予測）と回帰問題（数値予測）に分けられる</li>\n                    <li>高品質なラベル付きデータが必要</li>\n                    <li>精度の評価が明確（正解ラベルと比較可能）</li>\n                </ul>\n                \n                <h5>実務での応用例</h5>\n                <ul>\n                    <li>画像分類（犬/猫の判別）</li>\n                    <li>スパムメール検出</li>\n                    <li>売上予測</li>\n                    <li>医療診断支援</li>\n                </ul>\n            <h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) データのパターンを自動的に発見し、ラベルなしでグループ化する手法:</strong> これは「教師なし学習」の説明です。教師なし学習では、ラベルなしのデータから隠れたパターンや構造を発見します。クラスタリングや次元削減などがこれに該当します。</li><li><strong>B) 試行錯誤を通じて最適な行動を学習する手法:</strong> これは「強化学習」の説明です。強化学習では、エージェントが環境と相互作用しながら、報酬を最大化する行動を学習します。ゲームAIやロボット制御などで使用されます。</li><li><strong>D) 人間の介入なしに自律的に学習する手法:</strong> これは誤解を招く説明です。教師あり学習では、人間が事前にデータにラベルを付ける必要があり、完全に自律的ではありません。むしろ人間の知識を活用する手法です。</li></ul>",
      "resources": []
    },
    {
      "id": "d1_q7",
      "type": "single",
      "text": "次のうち、分類問題の例として適切でないものはどれですか？",
      "choices": [
        {
          "label": "A",
          "text": "メールがスパムかどうかを判定する"
        },
        {
          "label": "B",
          "text": "画像に写っている動物の種類を識別する"
        },
        {
          "label": "C",
          "text": "明日の株価を予測する"
        },
        {
          "label": "D",
          "text": "顧客が商品を購入するかどうかを予測する"
        }
      ],
      "correct": [
        2
      ],
      "explanation": "\n                <h5>詳細解説</h5>\n                <p>分類問題は、入力データを事前に定義されたカテゴリ（クラス）のいずれかに分ける問題です。一方、株価予測は連続値を予測する「回帰問題」です。</p>\n                \n                <h5>分類問題と回帰問題の違い</h5>\n                <ul>\n                    <li><strong>分類問題</strong>: 離散的なカテゴリを予測（例：Yes/No、犬/猫/鳥）</li>\n                    <li><strong>回帰問題</strong>: 連続的な数値を予測（例：価格、温度、売上高）</li>\n                </ul>\n                \n                <h5>選択肢の解説</h5>\n                <ul>\n                    <li><strong>選択肢A</strong>: スパム/非スパムの2クラス分類（二値分類）</li>\n                    <li><strong>選択肢B</strong>: 複数の動物種からの多クラス分類</li>\n                    <li><strong>選択肢C</strong>: 株価という連続値の予測なので回帰問題</li>\n                    <li><strong>選択肢D</strong>: 購入する/しないの2クラス分類</li>\n                </ul>\n                \n                <h5>重要なポイント</h5>\n                <p>予測する値が「カテゴリ」か「数値」かで問題の種類が決まります。株価のような連続的な数値を予測する場合は、必ず回帰問題として扱います。</p>\n            <h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) メールがスパムかどうかを判定する:</strong> これは典型的な二値分類問題です。メールを「スパム」か「非スパム」の2つのカテゴリに分類するため、分類問題の良い例です。</li><li><strong>B) 画像に写っている動物の種類を識別する:</strong> これは多クラス分類問題です。画像を「犬」「猫」「鳥」などの複数のカテゴリのいずれかに分類するため、分類問題の良い例です。</li><li><strong>D) 顧客が商品を購入するかどうかを予測する:</strong> これは二値分類問題です。顧客の行動を「購入する」か「購入しない」の2つのカテゴリに分類するため、分類問題の良い例です。</li></ul>",
      "resources": []
    },
    {
      "id": "d1_q8",
      "type": "single",
      "text": "ニューラルネットワークの「過学習（オーバーフィッティング）」を防ぐ手法として適切でないものはどれですか？",
      "choices": [
        {
          "label": "A",
          "text": "ドロップアウト"
        },
        {
          "label": "B",
          "text": "早期停止（Early Stopping）"
        },
        {
          "label": "C",
          "text": "学習率の増加"
        },
        {
          "label": "D",
          "text": "正則化（Regularization）"
        }
      ],
      "correct": [
        2
      ],
      "explanation": "\n                <h5>詳細解説</h5>\n                <p>過学習は、モデルが訓練データに過度に適合し、新しいデータに対する汎化性能が低下する現象です。学習率の増加は過学習を悪化させる可能性があります。</p>\n                \n                <h5>過学習を防ぐ主な手法</h5>\n                <ul>\n                    <li><strong>ドロップアウト</strong>: 訓練時にランダムにニューロンを無効化し、モデルの複雑さを制御</li>\n                    <li><strong>早期停止</strong>: 検証データの性能が悪化し始めたら学習を停止</li>\n                    <li><strong>正則化</strong>: L1/L2正則化により重みの大きさにペナルティを課す</li>\n                    <li><strong>データ拡張</strong>: 訓練データを人工的に増やす</li>\n                </ul>\n                \n                <h5>なぜ学習率の増加が適切でないのか</h5>\n                <ul>\n                    <li>高い学習率は最適解を飛び越えてしまう可能性がある</li>\n                    <li>不安定な学習により過学習のリスクが増大</li>\n                    <li>通常は学習率の減衰（decay）を使用して安定した収束を図る</li>\n                </ul>\n                \n                <h5>実務でのベストプラクティス</h5>\n                <p>過学習の兆候（訓練誤差は下がるが検証誤差が上昇）を監視し、複数の手法を組み合わせて対処することが重要です。</p>\n            <h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) ドロップアウト:</strong> ドロップアウトは過学習を防ぐ効果的な手法です。訓練時にランダムにニューロンを無効化（ドロップ）することで、ネットワークが特定のニューロンに過度に依存することを防ぎ、より頑健なモデルを構築します。</li><li><strong>B) 早期停止（Early Stopping）:</strong> 早期停止は過学習を防ぐ実用的な手法です。検証データの損失をモニタリングし、改善が見られなくなったら訓練を停止することで、訓練データへの過剰な適合を防ぎます。</li><li><strong>D) 正則化（Regularization）:</strong> 正則化（L1/L2正則化）は過学習を防ぐ基本的な手法です。損失関数に重みの大きさに対するペナルティ項を追加することで、モデルの複雑さを制限し、汎化性能を向上させます。</li></ul>",
      "resources": []
    },
    {
      "id": "d1_q9",
      "type": "single",
      "text": "自然言語処理（NLP）タスクの例として、次のうち最も適切なものはどれですか？",
      "choices": [
        {
          "label": "A",
          "text": "画像内の物体検出"
        },
        {
          "label": "B",
          "text": "音声認識と文字起こし"
        },
        {
          "label": "C",
          "text": "時系列データの予測"
        },
        {
          "label": "D",
          "text": "強化学習によるゲームプレイ"
        }
      ],
      "correct": [
        1
      ],
      "explanation": "\n                <h5>詳細解説</h5>\n                <p>自然言語処理（NLP）は、人間の言語をコンピュータが理解・処理・生成する技術分野です。音声認識と文字起こしは、音声言語を文字言語に変換するNLPタスクです。</p>\n                \n                <h5>主なNLPタスクの例</h5>\n                <ul>\n                    <li><strong>音声認識・文字起こし</strong>: 音声データをテキストに変換</li>\n                    <li><strong>機械翻訳</strong>: ある言語から別の言語への翻訳</li>\n                    <li><strong>感情分析</strong>: テキストから感情や意見を抽出</li>\n                    <li><strong>質問応答</strong>: 質問に対する適切な回答を生成</li>\n                    <li><strong>テキスト要約</strong>: 長文を短く要約</li>\n                </ul>\n                \n                <h5>なぜ他の選択肢が誤りなのか</h5>\n                <ul>\n                    <li><strong>選択肢A</strong>: 画像内の物体検出はコンピュータビジョンのタスク</li>\n                    <li><strong>選択肢C</strong>: 時系列予測は一般的な機械学習タスクで、NLPに限定されない</li>\n                    <li><strong>選択肢D</strong>: 強化学習は学習パラダイムの一つで、特定のドメインに限定されない</li>\n                </ul>\n                \n                <h5>AWSのNLPサービス</h5>\n                <p>AWS では Amazon Transcribe（音声認識）、Amazon Comprehend（テキスト分析）、Amazon Translate（翻訳）などのNLPサービスを提供しています。</p>\n            <h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) 画像内の物体検出:</strong> これはコンピュータビジョン（CV）のタスクです。画像や動画などの視覚的データを処理するもので、自然言語（テキストや音声）を扱うNLPとは異なる分野です。</li><li><strong>C) 時系列データの予測:</strong> これは一般的な機械学習タスクです。株価、気温、売上などの時系列データを予測するもので、必ずしも言語データを扱うわけではないため、NLPタスクではありません。</li><li><strong>D) 強化学習によるゲームプレイ:</strong> これは強化学習の応用例です。エージェントが環境と相互作用しながら最適な行動を学習するもので、言語処理とは直接関係がないため、NLPタスクではありません。</li></ul>",
      "resources": []
    },
    {
      "id": "d1_q10",
      "type": "single",
      "text": "深層学習（ディープラーニング）と従来の機械学習の主な違いは何ですか？",
      "choices": [
        {
          "label": "A",
          "text": "深層学習は教師なし学習のみを使用する"
        },
        {
          "label": "B",
          "text": "深層学習は多層のニューラルネットワークを使用して特徴を自動抽出する"
        },
        {
          "label": "C",
          "text": "深層学習は少量のデータでも高精度を達成できる"
        },
        {
          "label": "D",
          "text": "深層学習は計算リソースを必要としない"
        }
      ],
      "correct": [
        1
      ],
      "explanation": "\n                <h5>詳細解説</h5>\n                <p>深層学習の最大の特徴は、多層ニューラルネットワークを使用して、生データから特徴を自動的に学習・抽出できる点です。これにより、手動での特徴設計が不要になります。</p>\n                \n                <h5>深層学習と従来の機械学習の比較</h5>\n                <table style=\"border-collapse: collapse; width: 100%;\">\n                    <tr>\n                        <th style=\"border: 1px solid #ddd; padding: 8px;\">側面</th>\n                        <th style=\"border: 1px solid #ddd; padding: 8px;\">従来の機械学習</th>\n                        <th style=\"border: 1px solid #ddd; padding: 8px;\">深層学習</th>\n                    </tr>\n                    <tr>\n                        <td style=\"border: 1px solid #ddd; padding: 8px;\">特徴抽出</td>\n                        <td style=\"border: 1px solid #ddd; padding: 8px;\">手動で設計</td>\n                        <td style=\"border: 1px solid #ddd; padding: 8px;\">自動学習</td>\n                    </tr>\n                    <tr>\n                        <td style=\"border: 1px solid #ddd; padding: 8px;\">データ量</td>\n                        <td style=\"border: 1px solid #ddd; padding: 8px;\">少量でも可</td>\n                        <td style=\"border: 1px solid #ddd; padding: 8px;\">大量のデータが必要</td>\n                    </tr>\n                    <tr>\n                        <td style=\"border: 1px solid #ddd; padding: 8px;\">計算リソース</td>\n                        <td style=\"border: 1px solid #ddd; padding: 8px;\">比較的少ない</td>\n                        <td style=\"border: 1px solid #ddd; padding: 8px;\">GPU等の高性能リソースが必要</td>\n                    </tr>\n                </table>\n                \n                <h5>なぜ他の選択肢が誤りなのか</h5>\n                <ul>\n                    <li><strong>選択肢A</strong>: 深層学習は教師あり・教師なし・強化学習すべてで使用可能</li>\n                    <li><strong>選択肢C</strong>: 深層学習は大量のデータを必要とし、少量データでは従来手法が有利な場合が多い</li>\n                    <li><strong>選択肢D</strong>: 深層学習は膨大な計算リソース（GPU/TPU）を必要とする</li>\n                </ul>\n            <h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) 深層学習は教師なし学習のみを使用する:</strong> これは誤りです。深層学習は教師あり学習（画像分類、物体検出）、教師なし学習（オートエンコーダ、生成モデル）、強化学習（AlphaGo、ゲームAI）のすべてで使用されます。学習方式に制限はありません。</li><li><strong>C) 深層学習は少量のデータでも高精度を達成できる:</strong> これは深層学習の弱点と正反対です。深層学習は「データハングリー」と呼ばれ、高精度を達成するには大量のデータが必要です。少量データでは過学習しやすく、従来の機械学習手法の方が効果的な場合が多いです。</li><li><strong>D) 深層学習は計算リソースを必要としない:</strong> これは完全に誤りです。深層学習は膨大な計算リソース（高性能GPU、TPU、大容量メモリ）を必要とし、訓練に数日から数週間かかることもあります。これは深層学習の主要な制約の一つです。</li></ul>",
      "resources": []
    }
  ]
}