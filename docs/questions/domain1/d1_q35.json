{
  "id": "d1_q35",
  "type": "single",
  "text": "機械学習モデルのデバッグ手法として適切でないものはどれですか？",
  "choices": [
    {
      "label": "A",
      "text": "学習曲線の可視化"
    },
    {
      "label": "B",
      "text": "特徴量の重要度分析"
    },
    {
      "label": "C",
      "text": "エラー分析"
    },
    {
      "label": "D",
      "text": "テストデータでの学習"
    }
  ],
  "correct": [
    3
  ],
  "explanation": "\n                <h5>詳細解説</h5>\n                <p>機械学習モデルのデバッグは体系的なアプローチが必要です。テストデータでの学習は、評価の公正性を損なう重大な誤りです。</p>\n                \n                <h5>なぜテストデータでの学習が誤りか</h5>\n                <ul>\n                    <li><strong>データリーケージ：</strong> テストデータの情報が訓練に漏れる</li>\n                    <li><strong>過度に楽観的な評価：</strong> 実際の性能を過大評価</li>\n                    <li><strong>汎化性能の喪失：</strong> 新しいデータでの性能が保証されない</li>\n                    <li><strong>科学的妥当性の欠如：</strong> 結果の再現性と信頼性が損なわれる</li>\n                </ul>\n                \n                <h5>適切なデバッグ手法</h5>\n                <ul>\n                    <li><strong>A. 学習曲線の可視化：</strong>\n                        <ul>\n                            <li>訓練誤差と検証誤差の推移を観察</li>\n                            <li>過学習・未学習の診断</li>\n                            <li>データ量の影響を評価</li>\n                        </ul>\n                    </li>\n                    <li><strong>B. 特徴量の重要度分析：</strong>\n                        <ul>\n                            <li>どの特徴量が予測に貢献しているか</li>\n                            <li>不要な特徴量の特定</li>\n                            <li>特徴量エンジニアリングの指針</li>\n                        </ul>\n                    </li>\n                    <li><strong>C. エラー分析：</strong>\n                        <ul>\n                            <li>誤分類サンプルの詳細調査</li>\n                            <li>エラーパターンの特定</li>\n                            <li>システマティックなバイアスの発見</li>\n                        </ul>\n                    </li>\n                </ul>\n                \n                <h5>デバッグのベストプラクティス</h5>\n                <ol>\n                    <li><strong>データの確認：</strong>\n                        <ul>\n                            <li>データ分布の可視化</li>\n                            <li>外れ値の検出</li>\n                            <li>クラス不均衡の確認</li>\n                        </ul>\n                    </li>\n                    <li><strong>簡単なベースラインから開始：</strong>\n                        <ul>\n                            <li>単純なモデルで基準を設定</li>\n                            <li>段階的に複雑化</li>\n                        </ul>\n                    </li>\n                    <li><strong>検証戦略の確認：</strong>\n                        <ul>\n                            <li>適切な交差検証</li>\n                            <li>時系列データでの時間的分割</li>\n                        </ul>\n                    </li>\n                </ol>\n                \n                <h5>実装例（学習曲線）</h5>\n                <pre><code>import matplotlib.pyplot as plt\nfrom sklearn.model_selection import learning_curve\n\ntrain_sizes, train_scores, val_scores = learning_curve(\n    estimator, X, y, cv=5, \n    train_sizes=np.linspace(0.1, 1.0, 10)\n)\n\nplt.plot(train_sizes, np.mean(train_scores, axis=1), label='Training score')\nplt.plot(train_sizes, np.mean(val_scores, axis=1), label='Validation score')\nplt.xlabel('Training Set Size')\nplt.ylabel('Score')\nplt.legend()</code></pre>\n            <h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) 学習曲線の可視化:</strong> これは適切なデバッグ手法です。訓練誤差と検証誤差の推移を見ることで、過学習や未学習を診断できます。</li><li><strong>B) 特徴量の重要度分析:</strong> これも適切な手法です。どの特徴量が予測に貢献しているかを理解することで、モデルの改善点が見つかります。</li><li><strong>C) エラー分析:</strong> これも重要なデバッグ手法です。誤分類されたサンプルを詳細に調査することで、モデルの弱点を特定できます。</li></ul>",
  "resources": []
}