{
  "id": "d4_q16",
  "type": "single",
  "text": "機械学習モデルの「技術的負債」を減らすための最も効果的なアプローチはどれですか？",
  "choices": [
    {
      "label": "A",
      "text": "ドキュメントを作成しない"
    },
    {
      "label": "B",
      "text": "コードの再利用性、テスト自動化、明確なAPIの設計"
    },
    {
      "label": "C",
      "text": "最新技術を常に追いかける"
    },
    {
      "label": "D",
      "text": "単一のモデルに依存する"
    }
  ],
  "correct": [
    1
  ],
  "explanation": "<h5>詳細解説</h5><p>正解はB: コードの再利用性、テスト自動化、明確なAPIの設計です。</p><p>機械学習システムにおける「技術的負債」とは、短期的な実装の便宜性を優先したことで、長期的にメンテナンスコストが増大する状況を指します。これを減らすには、ソフトウェアエンジニアリングのベストプラクティスを適用することが重要です。</p><h5>各選択肢の解説</h5><p>A) ドキュメントを作成しない - これは技術的負債を増やす最悪の選択です。ドキュメントがないと、コードの理解、メンテナンス、チーム間の知識共有が困難になります。</p><h5>B) コードの再利用性、テスト自動化、明確なAPIの設計（正解）- 技術的負債を減らす主要な戦略</h5><ul><li>コードの再利用性：モジュラー設計により、重複を避け、メンテナンスを簡素化</li><li>テスト自動化：ユニットテスト、統合テスト、エンドツーエンドテストの実装</li><li>明確なAPI設計：インターフェースの安定性とバージョン管理</li><li>継続的インテグレーション/デプロイメント（CI/CD）</li><li>コードレビューとペアプログラミング</li></ul><p>C) 最新技術を常に追いかける - これは技術的負債を増やす可能性があります。頻繁な技術スタックの変更は、学習コストとメンテナンスの複雑性を増大させます。</p><p>D) 単一のモデルに依存する - モノリシックな設計は、変更の影響範囲が大きく、テストが困難になるため、技術的負債を増やします。</p><h5>実践例：Amazon SageMakerでMLシステムを構築する際の技術的負債削減策</h5><p>1. SageMaker Pipelinesで再利用可能なワークフローを構築</p><p>2. モデルレジストリでバージョン管理を実施</p><p>3. 自動テストフレームワークの導入</p><p>4. Infrastructure as Code（CloudFormation/CDK）の活用</p><p>5. 明確なドキュメント作成とコード規約の遵守</p><p>これらの実践により、長期的なメンテナンスコストを削減し、システムの拡張性と信頼性を向上させることができます。</p><h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) ドキュメントを作成しない:</strong> パラメータの増加は計算コストを増大させ、必ずしも性能向上につながりません。</li><li><strong>C) 最新技術を常に追いかける:</strong> モデルの複雑化は過学習のリスクを高め、汎化性能を低下させる可能性があります。</li><li><strong>D) 単一のモデルに依存する:</strong> 単一のハイパーパラメータセットでは最適な性能が得られない可能性があり、体系的な探索が必要です。</li></ul>",
  "resources": []
}