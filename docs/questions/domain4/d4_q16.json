{
  "id": "d4_q16",
  "type": "single",
  "text": "機械学習モデルの「技術的負債」を減らすための最も効果的なアプローチはどれですか？",
  "choices": [
    {
      "label": "A",
      "text": "ドキュメントを作成しない"
    },
    {
      "label": "B",
      "text": "コードの再利用性、テスト自動化、明確なAPIの設計"
    },
    {
      "label": "C",
      "text": "最新技術を常に追いかける"
    },
    {
      "label": "D",
      "text": "単一のモデルに依存する"
    }
  ],
  "correct": [
    1
  ],
  "explanation": "正解はB: コードの再利用性、テスト自動化、明確なAPIの設計です。\n\n機械学習システムにおける「技術的負債」とは、短期的な実装の便宜性を優先したことで、長期的にメンテナンスコストが増大する状況を指します。これを減らすには、ソフトウェアエンジニアリングのベストプラクティスを適用することが重要です。\n\n各選択肢の解説：\nA) ドキュメントを作成しない - これは技術的負債を増やす最悪の選択です。ドキュメントがないと、コードの理解、メンテナンス、チーム間の知識共有が困難になります。\n\nB) コードの再利用性、テスト自動化、明確なAPIの設計（正解）- 技術的負債を減らす主要な戦略：\n  ・コードの再利用性：モジュラー設計により、重複を避け、メンテナンスを簡素化\n  ・テスト自動化：ユニットテスト、統合テスト、エンドツーエンドテストの実装\n  ・明確なAPI設計：インターフェースの安定性とバージョン管理\n  ・継続的インテグレーション/デプロイメント（CI/CD）\n  ・コードレビューとペアプログラミング\n\nC) 最新技術を常に追いかける - これは技術的負債を増やす可能性があります。頻繁な技術スタックの変更は、学習コストとメンテナンスの複雑性を増大させます。\n\nD) 単一のモデルに依存する - モノリシックな設計は、変更の影響範囲が大きく、テストが困難になるため、技術的負債を増やします。\n\n実践例：Amazon SageMakerでMLシステムを構築する際の技術的負債削減策：\n1. SageMaker Pipelinesで再利用可能なワークフローを構築\n2. モデルレジストリでバージョン管理を実施\n3. 自動テストフレームワークの導入\n4. Infrastructure as Code（CloudFormation/CDK）の活用\n5. 明確なドキュメント作成とコード規約の遵守\n\nこれらの実践により、長期的なメンテナンスコストを削減し、システムの拡張性と信頼性を向上させることができます。",
  "resources": []
}