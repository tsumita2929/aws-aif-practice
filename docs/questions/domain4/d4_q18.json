{
  "id": "d4_q18",
  "type": "single",
  "text": "データパイプラインの設計において最も重要な原則はどれですか？",
  "choices": [
    {
      "label": "A",
      "text": "複雑性を最大化する"
    },
    {
      "label": "B",
      "text": "再現性、スケーラビリティ、エラーハンドリング"
    },
    {
      "label": "C",
      "text": "手動プロセスを増やす"
    },
    {
      "label": "D",
      "text": "ドキュメント化を避ける"
    }
  ],
  "correct": [
    1
  ],
  "explanation": "<h5>詳細解説</h5><p>正解はB: 再現性、スケーラビリティ、エラーハンドリングです。</p><p>データパイプラインは機械学習システムの基盤であり、その設計品質がシステム全体の信頼性と効率性を決定します。堅牢なデータパイプラインは、データの収集から前処理、変換、保存まで一貫した処理を保証します。</p><h5>各選択肢の解説</h5><p>A) 複雑性を最大化する - これは完全に誤りです。シンプルで理解しやすいパイプラインの方が、メンテナンスが容易で、エラーの発見と修正が迅速に行えます。</p><h5>B) 再現性、スケーラビリティ、エラーハンドリング（正解）- データパイプラインの三大原則</h5><ul><li>再現性：同じ入力から常に同じ出力を生成</li><li>データのバージョン管理</li><li>処理ロジックの明確な定義</li><li>ランダムシードの固定</li><li>スケーラビリティ：データ量の増加に対応</li><li>並列処理の実装</li><li>リソースの動的割り当て</li><li>ボトルネックの特定と解消</li><li>エラーハンドリング：障害からの回復</li><li>リトライ機構</li><li>デッドレターキュー</li><li>アラートとモニタリング</li></ul><p>C) 手動プロセスを増やす - これは避けるべきです。手動プロセスは人的エラーの原因となり、スケーラビリティを阻害します。</p><p>D) ドキュメント化を避ける - データパイプラインの複雑性を考えると、ドキュメント化は必須です。データソース、変換ロジック、依存関係を明確に記録する必要があります。</p><h5>実践例：Amazon EMRとAWS Glueを使用したデータパイプライン</h5><p>1. データ収集：Amazon Kinesisでリアルタイムストリーミング</p><p>2. 前処理：AWS Glue ETLジョブで自動化</p><p>3. 保存：S3にパーティション化して保存</p><p>4. モニタリング：CloudWatchでメトリクス監視</p><p>5. エラー処理：Step Functionsで復旧ワークフロー</p><h5>ベストプラクティス</h5><ul><li>Infrastructure as Code（Terraform/CloudFormation）</li><li>データ品質チェックの自動化</li><li>段階的なロールアウト（開発→ステージング→本番）</li><li>データリネージの追跡</li></ul><h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) 複雑性を最大化する:</strong> 全体的な精度だけでなく、各クラスの性能も評価する必要があります。</li><li><strong>C) 手動プロセスを増やす:</strong> 精度（Accuracy）だけでは不均衡データセットで誤った評価をする可能性があります。</li></ul>",
  "resources": []
}