{
  "id": "d4_q25",
  "type": "single",
  "text": "「カナリアデプロイメント」の実践における利点は何ですか？",
  "choices": [
    {
      "label": "A",
      "text": "全ユーザーに一度に展開できる"
    },
    {
      "label": "B",
      "text": "段階的にリスクを管理しながら新モデルを展開できる"
    },
    {
      "label": "C",
      "text": "テストが不要になる"
    },
    {
      "label": "D",
      "text": "コストが削減される"
    }
  ],
  "correct": [
    1
  ],
  "explanation": "正解はB: 段階的にリスクを管理しながら新モデルを展開できるです。\n\nカナリアデプロイメントは、新しいモデルを少数のユーザーから段階的に展開する手法で、本番環境でのリスクを最小化しながら新機能をリリースできます。名前は炭鉱でカナリアを使って有毒ガスを検知した歴史に由来します。\n\n各選択肢の解説：\nA) 全ユーザーに一度に展開できる - これはカナリアデプロイメントの逆です。全ユーザーへの一斉展開は、問題が発生した場合の影響範囲が大きくなります。\n\nB) 段階的にリスクを管理しながら新モデルを展開できる（正解）- カナリアデプロイメントの利点：\n  ・リスク管理：\n    - 小規模なユーザーグループから開始\n    - 問題の早期発見と影響範囲の限定\n    - 迅速なロールバック\n  ・段階的展開：\n    - 1% → 5% → 25% → 50% → 100%\n    - 各段階でのメトリクス評価\n    - 信頼性の確保\n  ・実環境での検証：\n    - 本番データでの性能確認\n    - ユーザー反応の観察\n    - A/Bテストとの組み合わせ\n\nC) テストが不要になる - これは誤りです。カナリアデプロイメントは本番環境でのテストの一種ですが、事前のテストは依然として必要です。\n\nD) コストが削減される - 短期的にはインフラコストが増加しますが、障害による損失を防ぐことで長期的なコスト削減につながります。\n\n実践例：動画配信サービスの推薦アルゴリズム更新：\n1. デプロイメント戦略：\n   ```yaml\n   # SageMaker Endpoint設定\n   ProductionVariants:\n     - ModelName: current-model\n       InitialVariantWeight: 95\n     - ModelName: canary-model\n       InitialVariantWeight: 5\n   ```\n\n2. 監視メトリクス：\n   - ビジネスKPI：視聴時間、エンゲージメント率\n   - 技術指標：レイテンシー、エラー率\n   - ユーザー体験：離脱率、満足度\n\n3. 自動化パイプライン：\n   - CloudWatchアラームで異常検知\n   - Lambda関数で自動ロールバック\n   - Step Functionsで段階的な重み調整\n\n4. 展開スケジュール：\n   - Day 1-3: 5%のユーザー\n   - Day 4-7: 25%のユーザー\n   - Day 8-10: 50%のユーザー\n   - Day 11: 100%展開\n\n成功基準：\n・エラー率：前バージョンの110%以内\n・レイテンシー：P99で200ms以内\n・ビジネスメトリクス：5%以上の改善\n\nこのアプローチにより、大規模な障害を回避しながら、継続的な改善を実現できます。",
  "resources": []
}