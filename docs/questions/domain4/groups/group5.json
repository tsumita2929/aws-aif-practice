{
  "domain": 4,
  "group": 5,
  "title": "最新課題",
  "description": "CI/CD課題、自動ドリフト検知、LLM本番運用、レート制限、セキュリティ、エッジAI実装",
  "questionCount": 10,
  "questions": [
    {
      "id": "d4_q41",
      "type": "single",
      "text": "次のシナリオを考えてください： 「ニュースメディアが記事の自動タグ付けシステムを実装したい」 最も適切な評価方法はどれですか？",
      "choices": [
        {
          "label": "A",
          "text": "精度のみで評価"
        },
        {
          "label": "B",
          "text": "精度、再現率、F1スコア、人間評価を組み合わせる"
        },
        {
          "label": "C",
          "text": "開発者の主観で判断"
        },
        {
          "label": "D",
          "text": "評価は不要"
        }
      ],
      "correct": [
        1
      ],
      "explanation": "<h5>詳細解説</h5><p>正解：B) 精度、再現率、F1スコア、人間評価を組み合わせる</p><h5>記事の自動タグ付けシステムの評価は多面的に行う必要があります</h5><p>1. 精度：タグ付けの正確性を測定</p><p>2. 再現率：関連するタグをどれだけカバーできているか</p><p>3. F1スコア：精度と再現率のバランスを評価</p><p>4. 人間評価：実際の編集者による品質評価とフィードバック</p><p>複数の評価指標を組み合わせることで、実用的なシステムを構築できます。</p><h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) 精度のみで評価:</strong> 過度に低い学習率は収束が極めて遅くなり、実用的ではありません。</li><li><strong>C) 開発者の主観で判断:</strong> 学習率は固定である必要はなく、スケジューリングによる調整が有効です。</li><li><strong>D) 評価は不要:</strong> モデルごと、データセットごとに最適な学習率は異なり、調整が必要です。</li></ul>",
      "resources": []
    },
    {
      "id": "d4_q42",
      "type": "single",
      "text": "「継続的インテグレーション/継続的デプロイメント（CI/CD）」をMLに適用する際の課題は何ですか？",
      "choices": [
        {
          "label": "A",
          "text": "通常のソフトウェアと同じ"
        },
        {
          "label": "B",
          "text": "データの依存性、モデルの再現性、評価メトリクスの自動化"
        },
        {
          "label": "C",
          "text": "CI/CDは不要"
        },
        {
          "label": "D",
          "text": "手動プロセスの方が効率的"
        }
      ],
      "correct": [
        1
      ],
      "explanation": "<h5>詳細解説</h5><p>正解：B) データの依存性、モデルの再現性、評価メトリクスの自動化</p><h5>MLのCI/CDには特有の課題があります</h5><p>1. データの依存性：訓練データのバージョン管理と整合性の確保</p><p>2. モデルの再現性：同じデータとコードで同じ結果を得られる環境の構築</p><p>3. 評価メトリクスの自動化：モデル性能の自動評価としきい値管理</p><p>これらの課題に対処することで、MLモデルの継続的な改善と安定した展開が可能になります。</p><h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) 通常のソフトウェアと同じ:</strong> バッチ正規化は主に学習の安定化と高速化のために使用され、精度向上は副次的効果です。</li><li><strong>D) 手動プロセスの方が効率的:</strong> バッチ正規化は主に中間層で使用され、入力層での使用は一般的ではありません。</li></ul>",
      "resources": []
    },
    {
      "id": "d4_q43",
      "type": "single",
      "text": "「モデルのドリフト検出」を自動化する方法として最も効果的なものはどれですか？",
      "choices": [
        {
          "label": "A",
          "text": "定期的な手動チェック"
        },
        {
          "label": "B",
          "text": "統計的検定、パフォーマンスモニタリング、アラート設定の自動化"
        },
        {
          "label": "C",
          "text": "ドリフトは検出不要"
        },
        {
          "label": "D",
          "text": "年に一度チェック"
        }
      ],
      "correct": [
        1
      ],
      "explanation": "<h5>詳細解説</h5><p>正解：B) 統計的検定、パフォーマンスモニタリング、アラート設定の自動化</p><h5>モデルドリフトの自動検出は運用上重要です</h5><p>1. 統計的検定：入力データの分布変化を自動的に検出</p><p>2. パフォーマンスモニタリング：精度低下を継続的に監視</p><p>3. アラート設定：しきい値を超えた場合に自動通知</p><p>この自動化により、モデルの劣化を早期に発見し、適切な対応が可能になります。</p><h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>C) ドリフトは検出不要:</strong> プルーニングは有効ですが、適切に行わないと大幅な精度低下を招きます。</li><li><strong>D) 年に一度チェック:</strong> 圧縮技術は精度とのトレードオフがあり、慎重な適用が必要です。</li></ul>",
      "resources": []
    },
    {
      "id": "d4_q44",
      "type": "single",
      "text": "次のシナリオを考えてください： 「航空会社が遅延予測システムを構築し、リアルタイムで更新したい」 最も重要な技術的考慮事項はどれですか？",
      "choices": [
        {
          "label": "A",
          "text": "バッチ処理のみを使用"
        },
        {
          "label": "B",
          "text": "ストリーミングデータ処理、低レイテンシー推論、高可用性"
        },
        {
          "label": "C",
          "text": "日次更新で十分"
        },
        {
          "label": "D",
          "text": "精度よりも見た目を重視"
        }
      ],
      "correct": [
        1
      ],
      "explanation": "<h5>詳細解説</h5><p>正解：B) ストリーミングデータ処理、低レイテンシー推論、高可用性</p><h5>航空会社の遅延予測システムには以下が必要です</h5><p>1. ストリーミングデータ処理：リアルタイムの気象情報や運航情報を即座に処理</p><p>2. 低レイテンシー推論：ミリ秒単位での予測結果の提供</p><p>3. 高可用性：24時間365日の安定稼働を保証</p><p>これらの技術要件を満たすことで、実用的な遅延予測システムが実現できます。</p><h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) バッチ処理のみを使用:</strong> 早期停止は検証損失を監視して行うべきで、訓練損失だけでは過学習を検出できません。</li><li><strong>C) 日次更新で十分:</strong> 固定エポックでは最適な停止点を逃す可能性があり、動的な判断が推奨されます。</li><li><strong>D) 精度よりも見た目を重視:</strong> 精度が100%に達することは過学習の兆候であり、一般化性能が損なわれている可能性があります。</li></ul>",
      "resources": []
    },
    {
      "id": "d4_q45",
      "type": "single",
      "text": "MLプロジェクトを成功に導く最も重要な要因は何ですか？",
      "choices": [
        {
          "label": "A",
          "text": "最新技術の使用"
        },
        {
          "label": "B",
          "text": "明確なビジネス目標、適切なデータ、継続的な改善プロセス"
        },
        {
          "label": "C",
          "text": "大規模な予算"
        },
        {
          "label": "D",
          "text": "個人の直感"
        }
      ],
      "correct": [
        1
      ],
      "explanation": "<h5>詳細解説</h5><p>正解：B) 明確なビジネス目標、適切なデータ、継続的な改善プロセス</p><h5>MLプロジェクトの成功には基本的な要素が重要です</h5><p>1. 明確なビジネス目標：技術ではなくビジネス価値を中心に据える</p><p>2. 適切なデータ：質の高いデータと適切な量の確保</p><p>3. 継続的な改善プロセス：モデルの監視と定期的な更新</p><p>最新技術や大規模予算よりも、これらの基本要素が成功の鍵となります。</p><h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) 最新技術の使用:</strong> 高い再現率でも適合率が低い場合、多くの誤検知が発生し実用的ではありません。</li><li><strong>D) 個人の直感:</strong> 不均衡データでは精度(Accuracy)は誤解を招く指標となり、F1スコアなどが推奨されます。</li></ul>",
      "resources": []
    },
    {
      "id": "d4_q46",
      "type": "single",
      "text": "プロダクション環境でLLMを使用する際のレート制限とエラーハンドリングのベストプラクティスはどれですか？",
      "choices": [
        {
          "label": "A",
          "text": "エラーが発生したら即座にリトライする"
        },
        {
          "label": "B",
          "text": "指数バックオフ、サーキットブレーカー、フォールバック戦略の実装"
        },
        {
          "label": "C",
          "text": "レート制限は考慮しない"
        },
        {
          "label": "D",
          "text": "全てのエラーをユーザーに表示する"
        }
      ],
      "correct": [
        1
      ],
      "explanation": "<h5>詳細解説</h5><p>正解：B) 指数バックオフ、サーキットブレーカー、フォールバック戦略の実装</p><h5>LLMのプロダクション利用では堅牢なエラーハンドリングが必要です</h5><p>1. 指数バックオフ：リトライ間隔を徐々に増やしサービスへの負荷を軽減</p><p>2. サーキットブレーカー：連続したエラー時にサービスを一時的に遮断</p><p>3. フォールバック戦略：代替モデルやキャッシュされた結果の利用</p><p>これらの実装により、安定したサービス提供が可能になります。</p><h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>C) レート制限は考慮しない:</strong> 時系列データには特有の前処理（差分、定常化など）が必要です。</li><li><strong>D) 全てのエラーをユーザーに表示する:</strong> 将来予測には過去データのパターンが将来も続くという仮定があり、限界があります。</li></ul>",
      "resources": []
    },
    {
      "id": "d4_q47",
      "type": "multiple",
      "text": "【複数選択】 LLMベースのアプリケーションのセキュリティ対策として重要なものを2つ選択してください。",
      "choices": [
        {
          "label": "A",
          "text": "プロンプトインジェクション攻撃への対策"
        },
        {
          "label": "B",
          "text": "入力の検証とサニタイゼーション"
        },
        {
          "label": "C",
          "text": "全ての出力をそのまま信頼する"
        },
        {
          "label": "D",
          "text": "APIキーをフロントエンドコードに埋め込む"
        },
        {
          "label": "E",
          "text": "モデルへのアクセスを無制限に許可する"
        }
      ],
      "correct": [
        0,
        1
      ],
      "explanation": "<h5>詳細解説</h5><p>正解：A) プロンプトインジェクション攻撃への対策、B) 入力の検証とサニタイゼーション</p><h5>LLMベースのアプリケーションには特有のセキュリティリスクがあります</h5><p>1. プロンプトインジェクション攻撃への対策：悪意のある入力によるプロンプトの改変を防ぐ</p><p>2. 入力の検証とサニタイゼーション：有害なコンテンツや個人情報をフィルタリング</p><p>APIキーは必ずバックエンドで管理し、出力は検証してから使用することが重要です。</p><h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>C) 全ての出力をそのまま信頼する:</strong> ノーフリーランチ定理により、すべての問題に最適な単一の手法は存在しません。</li></ul>",
      "resources": []
    },
    {
      "id": "d4_q48",
      "type": "single",
      "text": "機械学習パイプラインの自動化において最も重要な要素はどれですか？",
      "choices": [
        {
          "label": "A",
          "text": "手動でのコード実行"
        },
        {
          "label": "B",
          "text": "再現可能性と追跡可能性を確保したCI/CDパイプライン"
        },
        {
          "label": "C",
          "text": "ドキュメントの排除"
        },
        {
          "label": "D",
          "text": "単一の開発環境のみの使用"
        }
      ],
      "correct": [
        1
      ],
      "explanation": "<h5>詳細解説</h5><p>正解：B) 再現可能性と追跡可能性を確保したCI/CDパイプライン</p><h5>機械学習パイプラインの自動化では以下が重要です</h5><p>1. 再現可能性：同じ入力から同じ結果を得られる環境の構築</p><p>2. 追跡可能性：データ、コード、モデルのバージョン管理</p><p>3. 自動化されたテストと検証：品質保証の自動化</p><p>これにより、信頼性の高いMLシステムの構築と運用が可能になります。</p><h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>C) ドキュメントの排除:</strong> 修正したモデルの品質と性能は元のモデルと異なる可能性があり、検証が必要です。</li><li><strong>D) 単一の開発環境のみの使用:</strong> 元のモデルへの依存は、更新や廃止時のリスクとなります。</li></ul>",
      "resources": []
    },
    {
      "id": "d4_q49",
      "type": "single",
      "text": "フィーチャーストアの主な利点として適切でないものはどれですか？",
      "choices": [
        {
          "label": "A",
          "text": "特徴量の再利用性の向上"
        },
        {
          "label": "B",
          "text": "訓練と推論での特徴量の一貫性確保"
        },
        {
          "label": "C",
          "text": "データガバナンスの向上"
        },
        {
          "label": "D",
          "text": "モデルの精度を必ず向上させる"
        }
      ],
      "correct": [
        3
      ],
      "explanation": "<h5>詳細解説</h5><p>正解：D) モデルの精度を必ず向上させる</p><h5>フィーチャーストアの主な利点は以下の通りです</h5><p>1. 特徴量の再利用性向上：チーム間での特徴量共有</p><p>2. 訓練と推論での一貫性：同じ特徴量変換ロジックの適用</p><p>3. データガバナンスの向上：特徴量の管理と追跡</p><p>ただし、フィーチャーストアはインフラストラクチャーであり、モデルの精度向上を保証するものではありません。</p><h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>A) 特徴量の再利用性の向上:</strong> k-meansはクラスタ数を事前に指定する必要があり、自動決定はできません。</li><li><strong>C) データガバナンスの向上:</strong> k-meansは球状のクラスタを仮定し、任意の形状には対応できません。</li></ul>",
      "resources": []
    },
    {
      "id": "d4_q50",
      "type": "single",
      "text": "エッジコンピューティングでAIを実装する際の主な課題として適切でないものはどれですか？",
      "choices": [
        {
          "label": "A",
          "text": "限られた計算リソース"
        },
        {
          "label": "B",
          "text": "ネットワーク接続の不安定性"
        },
        {
          "label": "C",
          "text": "モデルサイズの制約"
        },
        {
          "label": "D",
          "text": "無制限のストレージ容量"
        }
      ],
      "correct": [
        3
      ],
      "explanation": "<h5>詳細解説</h5><p>正解：D) 無制限のストレージ容量</p><h5>エッジコンピューティングでのAI実装には以下の課題があります</h5><p>1. 限られた計算リソース：低消費電力デバイスでの推論実行</p><p>2. ネットワーク接続の不安定性：オフライン動作への対応</p><p>3. モデルサイズの制約：限られたメモリでの動作</p><p>エッジデバイスは通常、ストレージ容量も制限されており、無制限ではありません。</p><h5>なぜ他の選択肢が間違っているのか</h5><ul><li><strong>B) ネットワーク接続の不安定性:</strong> 強化学習の報酬設計は困難で、不適切な報酬は望ましくない行動を引き起こします。</li><li><strong>C) モデルサイズの制約:</strong> 強化学習は不安定で収束が遅く、大量の試行が必要です。</li></ul>",
      "resources": []
    }
  ]
}